// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrow.js 1`] = `
"=====Parsetree==========================================
external add_nat : nat -> int = \\"add_nat_bytecode\\" \\"add_nat_native\\"
module Error2 =
  struct
    type nonrec observation =
      {
      observed: int ;
      onStep:
        currentValue:((unit)[@ns.namedArgLoc ]) -> [%rescript.typehole ] }
  end
module Error3 =
  struct
    type nonrec observation =
      {
      observed: int ;
      onStep:
        currentValue:((unit)[@ns.namedArgLoc ]) -> [%rescript.typehole ] }
  end
=====Errors=============================================

  Syntax error!
  parsing/errors/typexpr/arrow.js:2:22-24  
  1 │ // notice usage of -> instead of =>
  2 │ external add_nat: nat -> int = \\"add_nat_bytecode\\" \\"add_nat_native\\"
  3 │ 
  4 │ module Error2 = {
  
  Did you forget a \`=>\` here?


  Syntax error!
  parsing/errors/typexpr/arrow.js:7:27-30  
  5 │   type observation ={
  6 │     observed: int,
  7 │     onStep: (~currentValue   ) => unit
  8 │   }
  9 │ }
  
  Did you forget a \`:\` here? It signals the start of a type


  Syntax error!
  parsing/errors/typexpr/arrow.js:14:26-29  
  12 │   type observation ={
  13 │     observed: int,
  14 │     onStep: ~currentValue  => unit
  15 │   }
  16 │ }
  
  Did you forget a \`:\` here? It signals the start of a type


========================================================"
`;

exports[`bsObjSugar.js 1`] = `
"=====Parsetree==========================================
type nonrec state =
  < url: [%rescript.typehole ]  ;protocols: string array   > 
type nonrec state =
  < url: [%rescript.typehole ] [@attr ] ;protocols: string array   > 
type nonrec state =
  < url: string  ;protocols: [%rescript.typehole ]  ;websocket: Websocket.t  
    > 
type nonrec state = < url: string  ;protocols: [%rescript.typehole ]   > 
type nonrec state = < send: string -> [%rescript.typehole ] [@bs.meth ]  > 
type nonrec state = < age: [%rescript.typehole ]  ;name: string   > 
type nonrec state =
  < age: [%rescript.typehole ] [@bs.set ] ;name: string   > 
type nonrec state = < age: [%rescript.typehole ]   ;.. > 
type nonrec state = < age: [%rescript.typehole ]  ;name: string   ;.. > 
type nonrec websocket =
  < id: [%rescript.typehole ]  ;channel: channelTyp   > 
type nonrec websocket = < id: [%rescript.typehole ]   > 
=====Errors=============================================

  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:2:8-3:13  
  1 │ type state = {
  2 │   \\"url\\"
  3 │   \\"protocols\\": array<string>
  4 │ }
  5 │ 
  
  Did you forget a \`:\` here? It signals the start of a type


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:7:14-8:13  
   5 │ 
   6 │ type state = {
   7 │   @attr \\"url\\"
   8 │   \\"protocols\\": array<string>
   9 │ }
  10 │ 
  
  Did you forget a \`:\` here? It signals the start of a type


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:13:14-14:13  
  11 │ type state = {
  12 │   \\"url\\": string,
  13 │   \\"protocols\\"
  14 │   \\"websocket\\": Websocket.t,
  15 │ }
  16 │ 
  
  Did you forget a \`:\` here? It signals the start of a type


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:19:14-20:1  
  17 │ type state = {
  18 │   \\"url\\": string,
  19 │   \\"protocols\\"
  20 │ }
  21 │ 
  22 │ type state = {
  
  Did you forget a \`:\` here? It signals the start of a type


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:25:1  
  23 │   @bs.meth
  24 │   \\"send\\": string =>
  25 │ }
  26 │ 
  27 │ type state = {
  
  I'm missing a type here


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:28:10  
  26 │ 
  27 │ type state = {
  28 │   \\"age\\": ,
  29 │   \\"name\\": string
  30 │ }
  
  I'm missing a type here


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:33:18  
  31 │ 
  32 │ type state = {
  33 │   @bs.set \\"age\\": ,
  34 │   \\"name\\": string
  35 │ }
  
  I'm missing a type here


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:37:25  
  35 │ }
  36 │ 
  37 │ type state = {.. \\"age\\": }
  38 │ type state = {
  39 │   ..
  
  I'm missing a type here


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:40:8-41:8  
  38 │ type state = {
  39 │   ..
  40 │   \\"age\\" 
  41 │   \\"name\\": string
  42 │ }
  43 │ 
  
  Did you forget a \`:\` here? It signals the start of a type


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:46:3-11  
  44 │ type websocket = {
  45 │   \\"id\\":
  46 │   \\"channel\\": channelTyp
  47 │ }
  48 │ 
  
  I'm missing a type here


  Syntax error!
  parsing/errors/typexpr/bsObjSugar.js:50:7-51:0  
  48 │ 
  49 │ type websocket = {
  50 │   \\"id\\"
  51 │ 
  
  Did you forget a \`:\` here? It signals the start of a type


========================================================"
`;

exports[`garbage.res 1`] = `
"=====Parsetree==========================================
external printName : name:((unit)[@ns.namedArgLoc ]) -> unit = \\"printName\\"
[@@bs.module \\"moduleName\\"]
=====Errors=============================================

  Syntax error!
  parsing/errors/typexpr/garbage.res:2:28  
  1 │ @bs.module(\\"moduleName\\")
  2 │ external printName: (~name:?, unit) => unit = \\"printName\\"
  3 │ 
  
  I'm not sure what to parse here when looking at \\"?\\".


========================================================"
`;

exports[`objectSpread.res 1`] = `
"=====Parsetree==========================================
type nonrec u = < a ;u: int   > 
type nonrec u = private < a ;u: int   > 
type nonrec x =
  | Type of < a ;u: int   >  
type nonrec u = < a ;u: int  ;v: int   > 
let f (x : < a: int  ;b: int   > ) = ()
=====Errors=============================================

  Syntax error!
  parsing/errors/typexpr/objectSpread.res:1:11-13  
  1 │ type u = {...a, u: int}
  2 │ 
  3 │ type u = private {...a, u: int}
  
  A record type declaration doesn't support the ... spread. Only an object (with quoted field names) does.


  Syntax error!
  parsing/errors/typexpr/objectSpread.res:3:19-21  
  1 │ type u = {...a, u: int}
  2 │ 
  3 │ type u = private {...a, u: int}
  4 │ 
  5 │ type x = Type({...a, u: int})
  
  A record type declaration doesn't support the ... spread. Only an object (with quoted field names) does.


  Syntax error!
  parsing/errors/typexpr/objectSpread.res:5:16-18  
  3 │ type u = private {...a, u: int}
  4 │ 
  5 │ type x = Type({...a, u: int})
  6 │ 
  7 │ type u = {...a, \\"u\\": int, v: int}
  
  A record type declaration doesn't support the ... spread. Only an object (with quoted field names) does.


  Syntax error!
  parsing/errors/typexpr/objectSpread.res:7:27  
  5 │ type x = Type({...a, u: int})
  6 │ 
  7 │ type u = {...a, \\"u\\": int, v: int}
  8 │ 
  9 │ let f = (x: {a: int, b: int}) => ()
  
  An object type declaration needs quoted field names. Did you mean \\"v\\"?


  Syntax error!
  parsing/errors/typexpr/objectSpread.res:9:14  
   7 │ type u = {...a, \\"u\\": int, v: int}
   8 │ 
   9 │ let f = (x: {a: int, b: int}) => ()
  10 │ 
  
  An inline record type declaration is only allowed in a variant constructor's declaration


========================================================"
`;

exports[`typeConstructorArgs.js 1`] = `
"=====Parsetree==========================================
type nonrec 'a node = {
  _value: 'a Js.Nullable.value }
type nonrec 'a t = 'a Belt.Map.t
type nonrec 'a t = private 'a Belt.Map.t
type nonrec t = int node option
type nonrec t = int node option
=====Errors=============================================

  Syntax error!
  parsing/errors/typexpr/typeConstructorArgs.js:2:28-31  
  1 │ type node<'a> = {
  2 │   _value: Js.Nullable.value('a)
  3 │ }
  4 │ 
  
  Type parameters require angle brackets:
  Js.Nullable.value<'a>


  Syntax error!
  parsing/errors/typexpr/typeConstructorArgs.js:5:24-27  
  3 │ }
  4 │ 
  5 │ type t<'a> = Belt.Map.t('a)
  6 │ type t<'a> = private Belt.Map.t('a)
  7 │ 
  
  Type parameters require angle brackets:
  Belt.Map.t<'a>


  Syntax error!
  parsing/errors/typexpr/typeConstructorArgs.js:6:32-35  
  4 │ 
  5 │ type t<'a> = Belt.Map.t('a)
  6 │ type t<'a> = private Belt.Map.t('a)
  7 │ 
  8 │ type t = option<<node<int>>
  
  Type parameters require angle brackets:
  Belt.Map.t<'a>


  Syntax error!
  parsing/errors/typexpr/typeConstructorArgs.js:9:28  
   7 │ 
   8 │ type t = option<<node<int>>
   9 │ type t = option(<node<int>>)
  10 │ 
  
  I'm not sure what to parse here when looking at \\")\\".


========================================================"
`;

exports[`typeVar.res 1`] = `
"=====Parsetree==========================================
type nonrec 'A x = '
type nonrec 'A x = 'let
=====Errors=============================================

  Syntax error!
  parsing/errors/typexpr/typeVar.res:1:15  
  1 │ type x<'A> = '_
  2 │ type x<'A> = 'let
  3 │ 
  
  A type variable consists of a singlequote followed by a name like \`'a\` or \`'A\`


  Syntax error!
  parsing/errors/typexpr/typeVar.res:2:15-17  
  1 │ type x<'A> = '_
  2 │ type x<'A> = 'let
  3 │ 
  
  \`let\` is a reserved keyword. Keywords need to be escaped: \\\\\\"let\\"


========================================================"
`;
